#!/bin/sh
""""exec ${PYTHON:-python} -t $0 "$@";" """

__author__ = "Jeff Fisher <guppy@techmonkeys.org>"
__copyright__ = "Copyright 2010 Jeff Fisher"
__license__ = "GPL v2"

import sys
import os
import os.path
import shutil
import glob

rsync_args = ["-q", "-a", "-H", "-x", "--delete-during", "--numeric-ids"]

# 0 = Success
# 24 = Partial transfer due to vanished source files
# 25 = The --max-delete limit stopped deletions
# Anything else is considered a failure and the backup will be deleted
rsync_allowed_exitcodes = (0, 24, 25)

def find_snapshot(location):
	recent_snapshot = None
	recent_unixtime = 0

	for interval in ('hourly', 'daily', 'weekly', 'monthly'):
		for snapshot in glob.glob(os.path.join(location, "%s.*" % interval)):
			mtime = os.path.getmtime(snapshot)
			if mtime > recent_unixtime:
				recent_unixtime = mtime
				recent_snapshot = snapshot

	return recent_snapshot
					
def rotate_snapshots(location, interval, numcopies):
	numcopies -= 1
	highest = os.path.join(location, "%s.%d" % (interval, numcopies))

	if os.path.exists(highest):
		shutil.rmtree(highest)

	for i in range(numcopies - 1, -1, -1): 
		src = os.path.join(location, "%s.%d" % (interval, i))
		dst = os.path.join(location, "%s.%d" % (interval, i + 1))

		if os.path.exists(src):
			shutil.move(src, dst)

	dst = os.path.join(location, "%s.0" % interval)
	shutil.move(os.path.join(location, ".%s.0" % interval), dst)
	os.utime(dst, None)

if __name__ == "__main__":
	from optparse import OptionParser

	usage = "usage: %prog [options] hourly|daily|weekly source destination [--] [extra arguments to pass to rsync]"

	def print_usage():
		print >>sys.stderr, usage
		sys.exit(1)
		
	parser = OptionParser(usage=usage)
	parser.add_option("-f", "--force", action="store_true", dest="force", default=0, help="Force the backup to run even if the previous backup failed")
	parser.add_option("-n", "--num", type="int", dest="numcopies", default=0, help="The number of backups to keep for a specific interval")
	parser.add_option("-v", "--verbose", action="store_true", dest="verbose", default=0, help="Be verbose")
	parser.add_option("--no-rsync-defaults", action="store_true", dest="no_rsync_defaults", default=False, help="Removes all our default rsync arguments except for --link-dest")
	parser.add_option("--no-H", action="store_false", dest="hardlinks", default=True, help="Turns off rsync's preserve hard links option")
	parser.add_option("--no-x", action="store_false", dest="onefs", default=True, help="Turns off rsync's one-file-system option")

	(opts, args) = parser.parse_args()

	if len(args) < 3 or args[0] not in ("hourly", "daily", "weekly"):
		print_usage()

	interval, source, destination = args[0:3]

	if not os.path.exists(destination):
		print >>sys.stderr, "cannot access %s: No such file or directory" % destination
		sys.exit(1)

	if not os.path.isdir(destination):
		print >>sys.stderr, "cannot create directory %s: File exists" % destination
		sys.exit(1)

	destination = os.path.realpath(destination)

	if not opts.onefs:
		rsync_args.remove("-x")

	if not opts.hardlinks:
		rsync_args.remove("-H")

	if opts.verbose:
		rsync_args.remove("-q")
		rsync_args += ['-v', '--progress']

	if opts.no_rsync_defaults:
		rsync_args = []

	last_snapshot = find_snapshot(destination)

	if last_snapshot is not None:
		rsync_args.append("--link-dest=%s" % last_snapshot)

	if len(args) > 3:
		rsync_args += args[3:]

	tmp_snapshot = os.path.join(destination, ".%s.0" % interval)

	if os.path.exists(tmp_snapshot):
		if opts.force:
			shutil.rmtree(tmp_snapshot)
		else:
			print >>sys.stderr, "cannot create backup %s: File exists" % tmp_snapshot
			sys.exit(1)

	ret = os.system("rsync %s %s/. %s" % (" ".join(rsync_args), source, tmp_snapshot))

	if os.WIFEXITED(ret):
		exitcode = os.WEXITSTATUS(ret)
	else:
		exitcode = -1

	if not os.path.exists(tmp_snapshot):
		print >>sys.stderr, "cannot access %s: No such file or directory" % tmp_snapshot
		sys.exit(1)

	if exitcode in rsync_allowed_exitcodes:
		rotate_snapshots(destination, interval, opts.numcopies)
	else:
		print >>sys.stderr, "cannot finish backup %s: rsync executed with exit code %d" % (tmp_snapshot, exitcode)
	
		if os.path.exists(tmp_snapshot):
			shutil.rmtree(tmp_snapshot)

		sys.exit(1)
	
# vim: filetype=python noexpandtab	
