#!/bin/sh
""""exec ${PYTHON:-python} -t $0 "$@";" """

__author__ = "Jeff Fisher <guppy@techmonkeys.org>"
__copyright__ = "Copyright 2010 Jeff Fisher"
__license__ = "GPL v2"

import atexit
import copy
import glob
import os
import os.path
import shutil
import subprocess
import sys
import types
import ConfigParser

intervals = ("hourly", "daily", "weekly", "monthly")

global_defaults = {
	"root": None,
	"mirror": None,
	"mirror_remote": None,
	"exclude": "",
	"rsync_cmd": "rsync",
	"rsync_args": "-qaHx --delete-during --numeric-ids",
	"hourly": 6,
	"daily": 7,
	"weekly": 4,
	"monthly": 3,
	"skip": "",
}

snappy_defaults = {
	"lockfile": None,
}

skip_atexit = False

@atexit.register
def cleanup():
	if skip_atexit:
		return
	
	lockfile = snappy_defaults["lockfile"]
	if lockfile is not None:
		try:
			os.unlink(lockfile)
		except Exception, e:
			print >>sys.stderr, e
			sys.exit(1)
		
# 0 = Success
# 24 = Partial transfer due to vanished source files
# 25 = The --max-delete limit stopped deletions
# Anything else is considered a failure and the backup will be deleted
rsync_allowed_exitcodes = (0, 23, 24, 25)

def putlog(*args, **kargs):
	level = kargs.get("level", 0)
	try:
		verbosity = opts.verbosity
	except:
		verbosity = 0

	if level <= verbosity:
		print " ".join(args)

def find_snapshot(location, type=None):
	recent_snapshot = None
	recent_unixtime = 0

	if type is None:
		tocheck = intervals
	else:
		tocheck = (type,)

	for interval in tocheck:
		for snapshot in glob.glob(os.path.join(location, "%s.*" % interval)):
			mtime = os.path.getmtime(snapshot)
			if mtime > recent_unixtime:
				recent_unixtime = mtime
				recent_snapshot = snapshot

	return recent_snapshot
					
def rotate_snapshots(location, interval, numcopies):
	numcopies -= 1
	highest = os.path.join(location, "%s.%d" % (interval, numcopies))

	if os.path.exists(highest):
		shutil.rmtree(highest)

	for i in range(numcopies - 1, -1, -1): 
		src = os.path.join(location, "%s.%d" % (interval, i))
		dst = os.path.join(location, "%s.%d" % (interval, i + 1))

		if os.path.exists(src):
			shutil.move(src, dst)

	dst = os.path.join(location, "%s.0" % interval)
	shutil.move(os.path.join(location, ".%s.0" % interval), dst)
	os.utime(dst, None)

def ssh(host, command):
	p = subprocess.Popen("/usr/bin/ssh -o PasswordAuthentication=no -o CheckHostIP=no -o StrictHostKeyChecking=no %s \"%s\"" % (host, command), shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

	stdout, stderr = p.communicate()
	return {"exitcode": p.returncode, "stdout": stdout.strip(), "stderr": stderr.strip()}

def clone_backup_remotely(settings, source, destination):
	ssh_details, remote_path = destination.split(":", 1)

	ret = ssh(ssh_details, "mkdir -p %s" % remote_path)

	if ret["exitcode"] != 0:
		print >>sys.stderr, ret["stderr"]
		return False

	for interval in ("daily", "weekly", "monthly"):
		snapshots = {}
		for i in glob.glob(os.path.join(source, "%s.*" % interval)):
			basename = os.path.basename(i)

			if basename in snapshots:
				continue

			mtime = os.path.getmtime(i)
			snapshots[mtime] = basename

		did_moves = True
		while did_moves:
			did_moves = False

			ret = ssh(ssh_details, "python -c \\\"import glob; import os; print [(i, os.path.getmtime(i)) for i in glob.glob('%s')]\\\"" % os.path.join(remote_path, "%s.*" % interval))

			if ret["exitcode"] != 0:
				print >>sys.stderr, ret["stderr"]
				return False

			for (i, mtime) in eval(ret["stdout"]):
				if mtime in snapshots:
					snapshot = snapshots[mtime]
					basename = os.path.basename(i)

					if snapshot == basename:
						continue

					new_snapshot = os.path.join(os.path.dirname(i), snapshot)
					tmp_snapshot = new_snapshot + ".tmp"

					ret = ssh(ssh_details, "test -e \\\"%s\\\"" % new_snapshot)

					if ret["exitcode"] == 1:
						ssh(ssh_details, "mv \\\"%s\\\" \\\"%s\\\"" % (i, new_snapshot))
					elif ret["exitcode"] == 0:
						ssh(ssh_details, "mv \\\"%s\\\" \\\"%s\\\" && mv \\\"%s\\\" \\\"%s\\\" && mv \\\"%s\\\" \\\"%s\\\"" % (new_snapshot, tmp_snapshot, i, new_snapshot, tmp_snapshot, i))
					else:
						print >>sys.stderr, ret["stderr"]
						return False


					did_moves = True
					break

	putlog("Running: %s %s %s/. %s/"  % (settings["rsync_cmd"], settings["rsync_args"], source, destination), level=2)
	os.system("%s %s %s/. %s/" % (settings["rsync_cmd"], settings["rsync_args"], source, destination))

def clone_backup(settings, source, destination):
	if not os.path.exists(destination):
		try:
			os.makedirs(destination)
		except Exception, e:
			print >>sys.stderr, "Unable to create mirror directory:", e
			return False
		else:
			putlog("Created", destination, level=2)

	if not os.path.isdir(destination):
		print >>sys.stderr, "cannot create directory %s: File exists" % destination
		return False

	for interval in ("hourly", "daily", "weekly", "monthly"):
		snapshots = {}
		for i in glob.glob(os.path.join(source, "%s.*" % interval)):
			basename = os.path.basename(i)

			if basename in snapshots:
				continue

			mtime = os.path.getmtime(i)
			snapshots[mtime] = basename

		moves_needed = True
		while moves_needed:
			moves_needed = False
			for i in glob.glob(os.path.join(destination, "%s.*" % interval)):
				mtime = os.path.getmtime(i)

				if mtime in snapshots:
					snapshot = snapshots[mtime]
					basename = os.path.basename(i)
					if snapshot == basename:
						continue

					new_snapshot = os.path.join(os.path.dirname(i), snapshot)

					if os.path.exists(new_snapshot):
						shutil.move(new_snapshot, new_snapshot + ".tmp")
						shutil.move(i, new_snapshot)
						shutil.move(new_snapshot + ".tmp", i)
					else:
						shutil.move(i, new_snapshot)

					moves_needed = True
					break

	putlog("Running: %s %s %s/. %s/"  % (settings["rsync_cmd"], settings["rsync_args"], source, destination), level=2)
	os.system("%s %s %s/. %s/" % (settings["rsync_cmd"], settings["rsync_args"], source, destination))

def take_backup(settings, source, destination, interval):
	putlog("Starting a backup of", source, "...", level=1)
	root = settings["root"]
	rsync_args = [settings["rsync_args"],]

	dest = os.path.join(root, destination)

	if not os.path.exists(dest):
		try:
			os.makedirs(dest)
		except Exception, e:
			print >>sys.stderr, "Unable to create backup directory:", e
			return False
		else:
			putlog("Created", dest, level=2)

	if not os.path.isdir(dest):
		print >>sys.stderr, "cannot create directory %s: File exists" % dest
		return False

	last_snapshot = find_snapshot(dest)

	if last_snapshot is not None:
		putlog("Found last snapshot @", last_snapshot, level=2) 
		rsync_args.append("--link-dest=%s" % last_snapshot)

	if settings["exclude"] is not None:
		rsync_args.append("--exclude=\"" + "\" --exclude=\"".join([x.strip() for x in settings["exclude"].split(",")]) + "\"")

	tmp_snapshot = os.path.join(dest, ".%s.0" % interval)

	if os.path.exists(tmp_snapshot):
		shutil.rmtree(tmp_snapshot)

		if os.path.exists(tmp_snapshot):
			print >>sys.stderr, "cannot create backup %s: File exists" % tmp_snapshot
			return False

	putlog("Running: %s %s %s/. %s/"  % (settings["rsync_cmd"], " ".join(rsync_args), source, tmp_snapshot), level=2)
	ret = os.system("%s %s %s/. %s/" % (settings["rsync_cmd"], " ".join(rsync_args), source, tmp_snapshot))

	if os.WIFEXITED(ret):
		exitcode = os.WEXITSTATUS(ret)
	else:
		exitcode = -1

	if not os.path.exists(tmp_snapshot):
		print >>sys.stderr, "cannot access %s: No such file or directory" % tmp_snapshot
		return False

	if exitcode in rsync_allowed_exitcodes:
		putlog("Rotating previous snapshots ...", level=2)
		rotate_snapshots(dest, interval, settings[interval])
	else:
		print >>sys.stderr, "cannot finish backup %s: rsync executed with exit code %d" % (tmp_snapshot, exitcode)
	
		if os.path.exists(tmp_snapshot):
			shutil.rmtree(tmp_snapshot)
	
		return False

	if settings["mirror"] is not None:
		putlog("Copying %s to %s ..." % (dest, settings["mirror"]), level=1)
		clone_backup(settings, dest, os.path.join(settings["mirror"], destination))

	if settings["mirror_remote"] is not None:
		putlog("Copying %s to %s ..." % (dest, settings["mirror_remote"]), level=1)
		clone_backup_remotely(settings, dest, settings["mirror_remote"] + "/" + destination)

	return True

def get_setting(config, group, key, default):
	if type(default) in (types.StringType, types.NoneType):
		try:
			tmp = config.get(group, key)
		except ValueError:
			print >>sys.stderr, "Unable to get the value for '%s' in the '%s' section" % (key, group)
			return None
	elif type(default) == types.BooleanType:
		try:
			tmp = config.getboolean(group, key)
		except ValueError:
			print >>sys.stderr, "Unable to get a boolean value for '%s' in the '%s' section" % (key, group)
			return None
	elif type(default) == types.IntType:
		try:
			tmp = config.getint(group, key)
		except ValueError:
			print >>sys.stderr, "Unable to get an integer value for '%s' in the '%s' section" % (key, group)
			return None
	else:
		return None

	return tmp

def preprocess_configs(configs):
	global snappy_defaults

	for configfile in configs:
		if not os.path.isfile(configfile):
			print >>sys.stderr, "cannot access %s: No such file or directory" % configfile
			sys.exit(1)

		config = ConfigParser.SafeConfigParser()
		try:
			config.read(configfile)
		except Exception, e:
			print >>sys.stderr, e
			sys.exit(1)

		if config.has_section("snappy"):
			for setting, value in config.items("snappy"):
				if setting in snappy_defaults:
					tmp = get_setting(config, "snappy", setting, snappy_defaults.get(setting))

					if tmp is None:
						sys.exit(1)
	
					snappy_defaults[setting] = tmp
				else:
					print >>sys.stderr, "Unknown setting '%s' in the snappy section" % setting
					sys.exit(1)

	lockfile = snappy_defaults["lockfile"]

	if lockfile is not None:
		if os.path.exists(lockfile):
			skip_atexit = True
			putlog(lockfile, "already exists, exiting", level=1)
			sys.exit(0)

		try:
			open(lockfile, "w").write("%d\n" % os.getpid())
		except Exception, e:
			print >>sys.stderr, e
			sys.exit(1)
	
def process_config(configfile, interval):
	if not os.path.isfile(configfile):
		print >>sys.stderr, "cannot access %s: No such file or directory" % configfile
		return False

	config = ConfigParser.SafeConfigParser()
	try:
		config.read(configfile)
	except Exception, e:
		print >>sys.stderr, e
		return False

	defaults = copy.deepcopy(global_defaults)

	if config.has_section("default"):
		for setting, value in config.items("default"):
			if setting in defaults:
				tmp = get_setting(config, "default", setting, defaults.get(setting))

				if tmp is None:
					return False
	
				defaults[setting] = tmp
			else:
				print >>sys.stderr, "Unknown setting '%s' in the default section" % setting
				return False

	for group in [i for i in config.sections() if i not in ("snappy", "default")]:
		if opts.group is not None and opts.group != group:
			continue

		settings = copy.deepcopy(defaults)
		settings["source"] = None

		for setting in settings:
			if config.has_option(group, setting):
				tmp = get_setting(config, group, setting, settings.get(setting))

				if tmp is None:
					return False

				settings[setting] = tmp

		if settings[interval] <= 0 or interval in [i.strip() for i in settings["skip"].split(",")]:
			putlog("Skipping group '%s' because this is a %s backup!" % (group, interval), level=3)
			continue

		root = settings["root"]

		if root is None:
			print >>sys.stderr, "The 'root' option in '%s' must be set" % group
			return False

		if not os.path.isdir(root):
			print >>sys.stderr, "cannot access %s: No such file or directory" % root
			return False

		if settings["mirror"] is not None:
			mirror = settings["mirror"]

			if mirror == root:
				print >>sys.stderr, "The mirror and root directories cannot be the same"
				return False

			if not os.path.isdir(mirror):
				print >>sys.stderr, "cannot access %s: No such file or directory" % root
				return False
		else:
			mirror = None

		if settings["mirror_remote"] is not None:
			mirror_remote = settings["mirror_remote"]
			ssh_details, remote_path = mirror_remote.split(":", 1)

			ret = ssh(ssh_details, "test -d \\\"%s\\\"" % remote_path)

			if ret["exitcode"] == 0:
				pass
			elif ret["exitcode"] == 1:
				print >>sys.stderr, "cannot remotely access %s: No such file or directory" % root
				return False
			else:
				print >>sys.stderr, ret["stderr"]
				return False
		else:
			mirror_remote = None

		if config.has_option(group, "source"):
			source = config.get(group, "source")

			if root == defaults["root"]:
				root = os.path.join(root, group)

				if not os.path.exists(root):
					try:
						os.makedirs(root)
					except Exception, e:
						print >>sys.stderr, "Unable to create backup directory:", e
						return False
					else:
						putlog("Created", root, level=2)

			if mirror_remote is not None and mirror_remote == defaults["mirror_remote"]:
				mirror_remote = mirror_remote + "/" + group

			if mirror is not None and mirror == defaults["mirror"]:
				mirror = os.path.join(mirror, group)

				if not os.path.exists(mirror):
					try:
						os.makedirs(mirror)
					except Exception, e:
						print >>sys.stderr, "Unable to create backup directory:", e
						return False
					else:
						putlog("Created", mirror, level=2)

		else:
			source = None

		settings["root"] = root
		settings["mirror"] = mirror
		settings["mirror_remote"] = mirror_remote

		for setting, value in config.items(group):
			if setting in settings or setting == "skip":
				continue
	
			if source is not None:
				if setting == "backup":
					for i in value.split(","):
						i = i.strip()
						take_backup(settings, source + i, i.lstrip("/"), interval)
						putlog("", level=2)
					continue
				else:
					value = source + value

			take_backup(settings, value, setting, interval)
			putlog("", level=2)

	return True

if __name__ == "__main__":
	from optparse import OptionParser

	usage = "usage: %prog [options] " + "|".join(intervals)

	parser = OptionParser(usage=usage)
	parser.add_option("-c", "--config", action="store", dest="config", default=None, help="Backup configuration file or directory")
	parser.add_option("-g", "--group", action="store", dest="group", default=None, help="Only run the backups contained within this group")
	parser.add_option("-d", "--defaults", action="store_true", dest="show_defaults", default=False, help="Display a list of defaults")
	parser.add_option("-v", "--verbose", action="count", dest="verbosity", default=0, help="Increase verbosity level")

	(opts, args) = parser.parse_args()

	if opts.show_defaults:
		longest = max([len(i) for i in global_defaults.keys()])
		for name, tmp in global_defaults.iteritems():
			if name == "root":
				continue

			print " " * (longest - len(name)), "%s: %s" % (name, tmp)
		sys.exit(0)

	if len(args) != 1 or args[0] not in intervals:
		print parser.get_usage()
		sys.exit(1)

	if opts.config is None:
		for f, t in (('snappy.conf', 'file'), ('snappy.d', 'dir')):
			for x in ("", "~/.", "/etc/"):
				tmp = "%s%s" % (f, x)
				if t == "file" and os.path.isfile(tmp):
					opts.config = (tmp,)
					break

				if t == "dir" and os.path.isdir(tmp):
					opts.config = glob.glob(os.path.join(tmp, "*.conf"))
					break
	elif os.path.isdir(opts.config):
		opts.config = glob.glob(os.path.join(opts.config, "*.conf"))
	else:
		opts.config = (opts.config,)

	if opts.config is None:
		print >>sys.stderr, "No configuration file or directory was found"
		sys.exit(1)

	preprocess_configs(opts.config)

	for config in opts.config:
		putlog("Processing", config, "...", level=2)
		process_config(config, args[0])

# vim: filetype=python noexpandtab
