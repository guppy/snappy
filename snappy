#!/bin/sh
""""exec ${PYTHON:-python} -t $0 "$@";" """

__author__ = "Jeff Fisher <guppy@techmonkeys.org>"
__copyright__ = "Copyright 2010 Jeff Fisher"
__license__ = "GPL v2"

import copy
import glob
import os
import os.path
import shutil
import sys
import types
import ConfigParser

global_defaults = {
	"root": None,
	"exclude": "",
	"rsync_cmd": "rsync",
	"rsync_args": "-qaHx --delete-during --numeric-ids",
	"hourly": 6,
	"daily": 7,
	"weekly": 4,
}

# 0 = Success
# 24 = Partial transfer due to vanished source files
# 25 = The --max-delete limit stopped deletions
# Anything else is considered a failure and the backup will be deleted
rsync_allowed_exitcodes = (0, 24, 25)

def putlog(*args, **kargs):
	level = kargs.get("level", 0)
	try:
		verbosity = opts.verbosity
	except:
		verbosity = 0

	if level <= verbosity:
		print " ".join(args)

def find_snapshot(location):
	recent_snapshot = None
	recent_unixtime = 0

	for interval in ('hourly', 'daily', 'weekly', 'monthly'):
		for snapshot in glob.glob(os.path.join(location, "%s.*" % interval)):
			mtime = os.path.getmtime(snapshot)
			if mtime > recent_unixtime:
				recent_unixtime = mtime
				recent_snapshot = snapshot

	return recent_snapshot
					
def rotate_snapshots(location, interval, numcopies):
	numcopies -= 1
	highest = os.path.join(location, "%s.%d" % (interval, numcopies))

	if os.path.exists(highest):
		shutil.rmtree(highest)

	for i in range(numcopies - 1, -1, -1): 
		src = os.path.join(location, "%s.%d" % (interval, i))
		dst = os.path.join(location, "%s.%d" % (interval, i + 1))

		if os.path.exists(src):
			shutil.move(src, dst)

	dst = os.path.join(location, "%s.0" % interval)
	shutil.move(os.path.join(location, ".%s.0" % interval), dst)
	os.utime(dst, None)

def take_backup(settings, source, destination, interval):
	putlog("Starting a backup of", source, "...", level=1)
	root = settings["root"]
	rsync_args = [settings["rsync_args"],]

	destination = os.path.join(root, destination)

	if not os.path.exists(destination):
		try:
			os.makedirs(destination)
		except Exception, e:
			print >>sys.stderr, "Unable to create backup directory:", e
			return False
		else:
			putlog("Created", destination, level=2)

	if not os.path.isdir(destination):
		print >>sys.stderr, "cannot create directory %s: File exists" % destination
		return False

	last_snapshot = find_snapshot(destination)

	if last_snapshot is not None:
		putlog("Found last snapshot @", last_snapshot, level=2) 
		rsync_args.append("--link-dest=%s" % last_snapshot)

	if settings["exclude"] is not None:
		rsync_args.append("--exclude=" + " --exclude=".join([x.strip() for x in settings["exclude"].split(",")]))

	tmp_snapshot = os.path.join(destination, ".%s.0" % interval)

	if os.path.exists(tmp_snapshot):
		print >>sys.stderr, "cannot create backup %s: File exists" % tmp_snapshot
		return False

	putlog("Running: %s %s %s/. %s"  % (settings["rsync_cmd"], " ".join(rsync_args), source, tmp_snapshot), level=2)
	ret = os.system("%s %s %s/. %s" % (settings["rsync_cmd"], " ".join(rsync_args), source, tmp_snapshot))

	if os.WIFEXITED(ret):
		exitcode = os.WEXITSTATUS(ret)
	else:
		exitcode = -1

	if not os.path.exists(tmp_snapshot):
		print >>sys.stderr, "cannot access %s: No such file or directory" % tmp_snapshot
		return False

	if exitcode in rsync_allowed_exitcodes:
		putlog("Rotating previous snapshots ...", level=2)
		rotate_snapshots(destination, interval, settings[interval])
	else:
		print >>sys.stderr, "cannot finish backup %s: rsync executed with exit code %d" % (tmp_snapshot, exitcode)
	
		if os.path.exists(tmp_snapshot):
			shutil.rmtree(tmp_snapshot)

		return False

	return True

def process_config(configfile, interval):
	if not os.path.isfile(configfile):
		print >>sys.stderr, "cannot access %s: No such file or directory" % configfile
		return

	config = ConfigParser.SafeConfigParser()
	try:
		config.read(configfile)
	except Exception, e:
		print >>sys.stderr, e
		return False

	defaults = copy.deepcopy(global_defaults)

	if config.has_section("default"):
		for setting, value in config.items("default"):
			if setting in defaults:
				tmp = defaults.get(setting)
				if type(tmp) in (types.StringType, types.NoneType):
					try:
						tmp = config.get("default", setting)
					except ValueError:
						print >>sys.stderr, "Unable to get the value for '%s' in the default section" % setting
						return False
				elif type(tmp) == types.BooleanType:
					try:
						tmp = config.getboolean("default", setting)
					except ValueError:
						print >>sys.stderr, "Unable to get a boolean value for '%s' in the default section" % setting
						return False
				elif type(tmp) == types.IntType:
					try:
						tmp = config.getint("default", setting)
					except ValueError:
						print >>sys.stderr, "Unable to get an integer value for '%s' in the default section" % setting
						return False
	
				defaults[setting] = tmp
			else:
				return (False, "Unknown setting '%s'" % setting)

	for group in [i for i in config.sections() if i != "default"]:
		if config.has_option(group, "skip"):
			skips = [i.strip() for i in config.get(group, "skip").replace(" ", "").split(",")]
			if interval in skips:
				putlog("Skipping group '%s' because this is a %s backup!" % (group, interval), level=1)
				continue
	
		settings = copy.deepcopy(defaults)
		settings["source"] = None

		for setting in settings:
			if config.has_option(group, setting):
				tmp = settings.get(setting)
				if type(tmp) in (types.StringType, types.NoneType):
					try:
						tmp = config.get(group, setting)
					except ValueError:
						print >>sys.stderr, "Unable to get the value for '%s' in the '%s' group" % (setting, group)
						return False
				elif type(tmp) == types.BooleanType:
					try:
						tmp = config.getboolean(group, setting)
					except ValueError:
						print >>sys.stderr, "Unable to get a boolean value for '%s' in the '%s' group" % (setting, group)
						return False
				elif type(tmp) == types.IntType:
					try:
						tmp = config.getint(group, setting)
					except ValueError:
						print >>sys.stderr, "Unable to get an integer value for '%s' in the '%s' group" % (setting, group)
						return False

				settings[setting] = tmp

		root = settings["root"]

		if root is None:
			print >>sys.stderr, "The 'root' option in '%s' must be set" % group
			return False

		root = os.path.realpath(root)

		if not os.path.isdir(root):
			print >>sys.stderr, "cannot access %s: No such file or directory" % root
			return False

		if config.has_option(group, "source"):
			source = config.get(group, "source")

			if root == defaults["root"]:
				root = os.path.join(root, group)

				if not os.path.exists(root):
					try:
						os.makedirs(root)
					except Exception, e:
						print >>sys.stderr, "Unable to create backup directory:", e
						return False
					else:
						putlog("Created", root, level=2)
		else:
			source = None

		settings["root"] = root

		for setting, value in config.items(group):
			if setting in settings or setting == "skip":
				continue
	
			if source is not None:
				if setting == "backup":
					for i in value.split(","):
						i = i.strip()
						take_backup(settings, source + i, i.lstrip("/"), interval)
						putlog("", level=2)
					continue
				else:
					value = source + value

			take_backup(settings, value, setting, interval)
			putlog("", level=2)

	return True

if __name__ == "__main__":
	from optparse import OptionParser

	usage = "usage: %prog [options] hourly|daily|weekly"

	parser = OptionParser(usage=usage)
	parser.add_option("-c", "--config", action="store", dest="config", default=None, help="Backup configuration file or directory")
	parser.add_option("-d", "--defaults", action="store_true", dest="show_defaults", default=False, help="Display a list of defaults")
	parser.add_option("-v", "--verbose", action="count", dest="verbosity", default=0, help="Increase verbosity level")

	(opts, args) = parser.parse_args()

	if opts.show_defaults:
		longest = max([len(i) for i in global_defaults.keys()])
		for name, tmp in global_defaults.iteritems():
			if name == "root":
				continue

			print " " * (longest - len(name)), "%s: %s" % (name, tmp)
		sys.exit(0)

	if len(args) != 1 or args[0] not in ("hourly", "daily", "weekly"):
		print parser.get_usage()
		sys.exit(1)

	if opts.config is None:
		for f, t in (('snappy.conf', 'file'), ('snappy.d', 'dir')):
			for x in ("", "~/.", "/etc/"):
				tmp = os.path.realpath("%s%s" % (f, x))
				if t == "file" and os.path.isfile(tmp):
					opts.config = (tmp,)
					break

				if t == "dir" and os.path.isdir(tmp):
					opts.config = glob.glob(os.path.join(tmp, "*.conf"))
					break
	elif os.path.isdir(opts.config):
		opts.config = glob.glob(os.path.join(os.path.realpath(opts.config), "*.conf"))
	else:
		opts.config = (opts.config,)

	if opts.config is None:
		print >>sys.stderr, "No configuration file or directory was found"
		sys.exit(1)

	for config in opts.config:
		putlog("Processing", config, "...", level=2)
		process_config(config, args[0])

# vim: filetype=python noexpandtab
